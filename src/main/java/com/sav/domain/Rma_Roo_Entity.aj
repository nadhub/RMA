// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sav.domain;

import com.sav.domain.Rma;
import java.lang.Integer;
import java.lang.Long;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Rma_Roo_Entity {
    
    declare @type: Rma: @Entity;
    
    @PersistenceContext
    transient EntityManager Rma.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long Rma.id;
    
    @Version
    @Column(name = "version")
    private Integer Rma.version;
    
    public Long Rma.getId() {
        return this.id;
    }
    
    public void Rma.setId(Long id) {
        this.id = id;
    }
    
    public Integer Rma.getVersion() {
        return this.version;
    }
    
    public void Rma.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void Rma.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Rma.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Rma attached = Rma.findRma(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Rma.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Rma.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Rma Rma.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Rma merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Rma.entityManager() {
        EntityManager em = new Rma().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Rma.countRmas() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Rma o", Long.class).getSingleResult();
    }
    
    public static Rma Rma.findRma(Long id) {
        if (id == null) return null;
        return entityManager().find(Rma.class, id);
    }
    
}
