// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sav.domain;

import com.sav.domain.Livraison;
import com.sav.domain.MaterielRma;
import com.sav.domain.MaterielRmaDataOnDemand;
import com.sav.reference.Transport;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect LivraisonDataOnDemand_Roo_DataOnDemand {
    
    declare @type: LivraisonDataOnDemand: @Component;
    
    private Random LivraisonDataOnDemand.rnd = new SecureRandom();
    
    private List<Livraison> LivraisonDataOnDemand.data;
    
    @Autowired
    private MaterielRmaDataOnDemand LivraisonDataOnDemand.materielRmaDataOnDemand;
    
    public Livraison LivraisonDataOnDemand.getNewTransientLivraison(int index) {
        Livraison obj = new Livraison();
        setDateLivraison(obj, index);
        setMaterielRma(obj, index);
        setReference(obj, index);
        setTrackingNumber(obj, index);
        setTransport(obj, index);
        return obj;
    }
    
    public void LivraisonDataOnDemand.setDateLivraison(Livraison obj, int index) {
        Date dateLivraison = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateLivraison(dateLivraison);
    }
    
    public void LivraisonDataOnDemand.setMaterielRma(Livraison obj, int index) {
        MaterielRma materielRma = materielRmaDataOnDemand.getRandomMaterielRma();
        obj.setMaterielRma(materielRma);
    }
    
    public void LivraisonDataOnDemand.setReference(Livraison obj, int index) {
        String reference = "reference_" + index;
        obj.setReference(reference);
    }
    
    public void LivraisonDataOnDemand.setTrackingNumber(Livraison obj, int index) {
        String trackingNumber = "trackingNumber_" + index;
        obj.setTrackingNumber(trackingNumber);
    }
    
    public void LivraisonDataOnDemand.setTransport(Livraison obj, int index) {
        Transport transport = Transport.class.getEnumConstants()[0];
        obj.setTransport(transport);
    }
    
    public Livraison LivraisonDataOnDemand.getSpecificLivraison(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Livraison obj = data.get(index);
        return Livraison.findLivraison(obj.getId());
    }
    
    public Livraison LivraisonDataOnDemand.getRandomLivraison() {
        init();
        Livraison obj = data.get(rnd.nextInt(data.size()));
        return Livraison.findLivraison(obj.getId());
    }
    
    public boolean LivraisonDataOnDemand.modifyLivraison(Livraison obj) {
        return false;
    }
    
    public void LivraisonDataOnDemand.init() {
        data = Livraison.findLivraisonEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Livraison' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.sav.domain.Livraison>();
        for (int i = 0; i < 10; i++) {
            Livraison obj = getNewTransientLivraison(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
