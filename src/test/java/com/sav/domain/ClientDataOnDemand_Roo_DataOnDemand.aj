// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sav.domain;

import com.sav.domain.Client;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect ClientDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ClientDataOnDemand: @Component;
    
    private Random ClientDataOnDemand.rnd = new SecureRandom();
    
    private List<Client> ClientDataOnDemand.data;
    
    public Client ClientDataOnDemand.getNewTransientClient(int index) {
        Client obj = new Client();
        setAdresse1(obj, index);
        setAdresse2(obj, index);
        setClient(obj, index);
        setCodePostal(obj, index);
        setContact(obj, index);
        setEmail(obj, index);
        setPays(obj, index);
        setRegion(obj, index);
        setTel(obj, index);
        setVille(obj, index);
        return obj;
    }
    
    public void ClientDataOnDemand.setAdresse1(Client obj, int index) {
        String adresse1 = "adresse1_" + index;
        if (adresse1.length() > 100) {
            adresse1 = adresse1.substring(0, 100);
        }
        obj.setAdresse1(adresse1);
    }
    
    public void ClientDataOnDemand.setAdresse2(Client obj, int index) {
        String adresse2 = "adresse2_" + index;
        if (adresse2.length() > 100) {
            adresse2 = adresse2.substring(0, 100);
        }
        obj.setAdresse2(adresse2);
    }
    
    public void ClientDataOnDemand.setClient(Client obj, int index) {
        String client = "client_" + index;
        obj.setClient(client);
    }
    
    public void ClientDataOnDemand.setCodePostal(Client obj, int index) {
        String codePostal = "codePostal_" + index;
        obj.setCodePostal(codePostal);
    }
    
    public void ClientDataOnDemand.setContact(Client obj, int index) {
        String contact = "contact_" + index;
        obj.setContact(contact);
    }
    
    public void ClientDataOnDemand.setEmail(Client obj, int index) {
        String email = "email_" + index;
        obj.setEmail(email);
    }
    
    public void ClientDataOnDemand.setPays(Client obj, int index) {
        String pays = "pays_" + index;
        obj.setPays(pays);
    }
    
    public void ClientDataOnDemand.setRegion(Client obj, int index) {
        String region = "region_" + index;
        obj.setRegion(region);
    }
    
    public void ClientDataOnDemand.setTel(Client obj, int index) {
        String tel = "tel_" + index;
        obj.setTel(tel);
    }
    
    public void ClientDataOnDemand.setVille(Client obj, int index) {
        String ville = "ville_" + index;
        obj.setVille(ville);
    }
    
    public Client ClientDataOnDemand.getSpecificClient(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Client obj = data.get(index);
        return Client.findClient(obj.getId());
    }
    
    public Client ClientDataOnDemand.getRandomClient() {
        init();
        Client obj = data.get(rnd.nextInt(data.size()));
        return Client.findClient(obj.getId());
    }
    
    public boolean ClientDataOnDemand.modifyClient(Client obj) {
        return false;
    }
    
    public void ClientDataOnDemand.init() {
        data = Client.findClientEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Client' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.sav.domain.Client>();
        for (int i = 0; i < 10; i++) {
            Client obj = getNewTransientClient(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
