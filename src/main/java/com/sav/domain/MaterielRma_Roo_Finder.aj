// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sav.domain;

import com.sav.domain.MaterielRma;
import com.sav.domain.Rma;
import com.sav.reference.Projet;
import com.sav.reference.Statut;
import java.lang.String;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect MaterielRma_Roo_Finder {
    
    public static TypedQuery<MaterielRma> MaterielRma.findMaterielRmasByDateReceptionGreaterThanEquals(Date dateReception) {
        if (dateReception == null) throw new IllegalArgumentException("The dateReception argument is required");
        EntityManager em = MaterielRma.entityManager();
        TypedQuery<MaterielRma> q = em.createQuery("SELECT o FROM MaterielRma AS o WHERE o.dateReception >= :dateReception", MaterielRma.class);
        q.setParameter("dateReception", dateReception);
        return q;
    }
    
    public static TypedQuery<MaterielRma> MaterielRma.findMaterielRmasByDiagnosticLike(String diagnostic) {
        if (diagnostic == null || diagnostic.length() == 0) throw new IllegalArgumentException("The diagnostic argument is required");
        diagnostic = diagnostic.replace('*', '%');
        if (diagnostic.charAt(0) != '%') {
            diagnostic = "%" + diagnostic;
        }
        if (diagnostic.charAt(diagnostic.length() - 1) != '%') {
            diagnostic = diagnostic + "%";
        }
        EntityManager em = MaterielRma.entityManager();
        TypedQuery<MaterielRma> q = em.createQuery("SELECT o FROM MaterielRma AS o WHERE LOWER(o.diagnostic) LIKE LOWER(:diagnostic)", MaterielRma.class);
        q.setParameter("diagnostic", diagnostic);
        return q;
    }
    
    public static TypedQuery<MaterielRma> MaterielRma.findMaterielRmasByProjetAndStatut(Projet projet, Statut statut) {
        if (projet == null) throw new IllegalArgumentException("The projet argument is required");
        if (statut == null) throw new IllegalArgumentException("The statut argument is required");
        EntityManager em = MaterielRma.entityManager();
        TypedQuery<MaterielRma> q = em.createQuery("SELECT o FROM MaterielRma AS o WHERE o.projet = :projet AND o.statut = :statut", MaterielRma.class);
        q.setParameter("projet", projet);
        q.setParameter("statut", statut);
        return q;
    }
    
    public static TypedQuery<MaterielRma> MaterielRma.findMaterielRmasByRma(Rma rma) {
        if (rma == null) throw new IllegalArgumentException("The rma argument is required");
        EntityManager em = MaterielRma.entityManager();
        TypedQuery<MaterielRma> q = em.createQuery("SELECT o FROM MaterielRma AS o WHERE o.rma = :rma", MaterielRma.class);
        q.setParameter("rma", rma);
        return q;
    }
    
}
