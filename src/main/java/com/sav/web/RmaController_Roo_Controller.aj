// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sav.web;

import com.sav.domain.AdressRetour;
import com.sav.domain.Client;
import com.sav.domain.Rma;
import com.sav.reference.Transport;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect RmaController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String RmaController.create(@Valid Rma rma, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("rma", rma);
            addDateTimeFormatPatterns(uiModel);
            return "rmas/create";
        }
        uiModel.asMap().clear();
        rma.persist();
        return "redirect:/rmas/" + encodeUrlPathSegment(rma.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String RmaController.createForm(Model uiModel) {
        uiModel.addAttribute("rma", new Rma());
        addDateTimeFormatPatterns(uiModel);
        List dependencies = new ArrayList();
        if (Client.countClients() == 0) {
            dependencies.add(new String[]{"client", "clients"});
        }
        if (AdressRetour.countAdressRetours() == 0) {
            dependencies.add(new String[]{"adressretour", "adressretours"});
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "rmas/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String RmaController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("rma", Rma.findRma(id));
        uiModel.addAttribute("itemId", id);
        return "rmas/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String RmaController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("rmas", Rma.findRmaEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Rma.countRmas() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("rmas", Rma.findAllRmas());
        }
        addDateTimeFormatPatterns(uiModel);
        return "rmas/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String RmaController.update(@Valid Rma rma, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("rma", rma);
            addDateTimeFormatPatterns(uiModel);
            return "rmas/update";
        }
        uiModel.asMap().clear();
        rma.merge();
        return "redirect:/rmas/" + encodeUrlPathSegment(rma.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String RmaController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("rma", Rma.findRma(id));
        addDateTimeFormatPatterns(uiModel);
        return "rmas/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String RmaController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Rma.findRma(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/rmas";
    }
    
    @ModelAttribute("adressretours")
    public Collection<AdressRetour> RmaController.populateAdressRetours() {
        return AdressRetour.findAllAdressRetours();
    }
    
    @ModelAttribute("clients")
    public Collection<Client> RmaController.populateClients() {
        return Client.findAllClients();
    }
    
    @ModelAttribute("rmas")
    public Collection<Rma> RmaController.populateRmas() {
        return Rma.findAllRmas();
    }
    
    @ModelAttribute("transports")
    public Collection<Transport> RmaController.populateTransports() {
        return Arrays.asList(Transport.class.getEnumConstants());
    }
    
    void RmaController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("rma_datecreation_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    String RmaController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
